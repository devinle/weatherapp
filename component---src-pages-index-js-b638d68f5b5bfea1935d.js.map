{"version":3,"sources":["webpack:///./src/api/config.js","webpack:///./src/api/index.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/layout.js","webpack:///./src/pages/index.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["axios","defaults","baseURL","params","appid","api","payload","http","get","Object","assign","StaticQueryContext","React","createContext","StaticQuery","props","react_default","a","createElement","Consumer","staticQueryData","data","query","render","children","propTypes","PropTypes","object","string","isRequired","func","layout","_ref","gatsby_browser_entry_StaticQuery","className","site","siteMetadata","title","href","_3892401927","Homepage","_this","_Component","call","this","handleGetLocation","setState","loading","location","getGeo","queryWeatherByLocation","position","fetchForecastData","lat","coords","latitude","lon","longitude","handleChange","e","target","value","handleSubmit","preventDefault","state","error","units","weather","today","componentDidMount","navigator","window","lastLocation","localStorage","getItem","lastMetric","handleMetrics","val","renderMetricsButtons","_this2","onClick","renderTodaysWeather","name","getIcon","getTemp","main","temp","map","key","description","humidity","pressure","wind","speed","getDateAsHours","dt","renderGeolocationButton","geolocation","getCurrentPosition","_callee","_ref2","_ref3","status","errorMessage","regenerator_default","wrap","_context","prev","next","q","abrupt","sent","city","country","setItem","t0","response","stop","getIconPath","str","_this3","_ref4","icon","src","alt","tempRound","Math","round","symbol","getDescription","_ref5","getDateAsString","timestamp","Date","toDateString","addZero","i","date","hours","getHours","minutes","getMinutes","ampm","getWeatherByDay","_this4","dateAsString","_this$state$weather$l","list","filter","_ref6","getDaysFromWeather","_this5","_this$state$weather$l2","dateTrack","_ref7","getWeatherListing","_this6","_ref8","_ref9","isLoading","isError","onSubmit","autoComplete","htmlFor","id","type","placeholder","onChange","Component","m","module","exports","require","default","ProdPageRenderer","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","json","shape"],"mappings":"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","file":"component---src-pages-index-js-b638d68f5b5bfea1935d.js","sourcesContent":["/** \n * config.js\n * \n * Configure an AJAX client\n */\nimport axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.openweathermap.org/data/2.5/';\naxios.defaults.params = {\n  appid:  'bd586fd23c1ee5b08ef59926e847b6e0'\n};\n\n// Export\nexport {\n  axios as config\n};\n\n","/** \n * api\n * \n * Http service wrapper\n */\n\n// Import axios for ajax\nimport {config as http} from './config';\n \n// Main export\nexport const api = {\n  /**\n   * @function fetchForecastData\n   * Get page url from http service\n   * \n   * @param {Object} payload\n   * @param {String} payload.q - City,CountryCode (ie. Vancouver,ca)\n   * @param {String} payload.units - C or F (ie. metric)\n   */\n  fetchForecastData: payload =>\n    http.get('forecast', { params: { ...payload } }),\n\n  /**\n   * @function fetchWeatherData\n   * Get page url from http service\n   * \n   * @param {Object} payload\n   * @param {String} payload.q - City,CountryCode (ie. Vancouver,ca)\n   * @param {String} payload.units - C or F (ie. metric)\n   */\n  fetchWeatherData: payload =>\n    http.get('weather', { params: { ...payload } }),\n};\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","import React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nexport default ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n\n    render={data => (\n      <div className=\"container\">\n        <h1>{data.site.siteMetadata.title}</h1>\n        {children}\n        <footer className=\"footer\">Happily built using <a href=\"https://www.gatsbyjs.org/\">Gatsby</a> :)</footer>\n      </div>\n    )}\n/>\n)\n","import React, { Component } from 'react';\nimport { api } from '../api/';\nimport Layout from '../components/layout';\n\nclass Homepage extends Component {\n  //Main contructor\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      error: '',\n      location: '',\n      units: 'metric', // Default\n      weather: {},\n      today: {}\n    };\n  }\n  /**\n   * Lifecycle method, check local storage\n   * for last saved search\n   */\n  componentDidMount() {\n      this.setState({\n          navigator: window.navigator ? window.navigator : null\n      });\n      // For convenience, load last query from local storage\n      const lastLocation = localStorage.getItem('weatherAppCityName');\n      const lastMetric = localStorage.getItem('weatherAppMetric');\n      if(lastLocation) {\n        this.setState({\n            location: lastLocation || '',\n            units: lastMetric || this.state.units\n        }, this.fetchForecastData);\n      }\n  }\n  /**\n   * @function handleMetrics\n   * Used to toggle the metrics between metric/imperial\n   * @param {String} val - The prefered units\n   */\n  handleMetrics(val) {\n        this.setState(\n            {\n                units: val\n            },\n            this.fetchForecastData\n        );\n  }\n  /**\n   * @function renderMetricsButtons\n   * Used to render the metrics button switcher\n   */\n  renderMetricsButtons() {\n      return (\n          <div className=\"metric-buttons\">\n              <button className={\"metric \"  + (this.state.units === 'metric' ? 'active' : '')} onClick={() => this.handleMetrics('metric')}>˚C</button>\n              <button className={\"metric \"  + (this.state.units === 'imperial' ? 'active' : '')} onClick={() => this.handleMetrics('imperial')}>˚F</button>\n          </div>\n      );\n  }\n\n  /**\n   * @function renderTodaysWeather\n   * Used to render current weather conditions for\n   * the active location.\n   */\n  renderTodaysWeather() {\n      if(this.state.loading || !this.state.today.name || this.state.error !== '') return '';\n      const { today } = this.state;\n      return (\n        <div className=\"today\">\n            <div className=\"headline headline--lg\">{today.name}</div>\n            <div className=\"today__inner\">\n                <div className=\"today__listing\">\n                    <div className=\"today__temp-icon\">\n                        {this.getIcon(today.weather)}\n                        {this.getTemp(today.main.temp)}\n                    </div>\n                    {\n                    today.weather.map(({ description }, key) => {\n                        return (\n                            <p key={key} className=\"today__listing-item\"><strong>Conditions:</strong> {description}</p>\n                        );\n                    })\n                }\n                    <p className=\"today__listing-item\"><strong>Humidity:</strong> {today.main.humidity}</p>\n                    <p className=\"today__listing-item\"><strong>Pressure:</strong> {today.main.pressure}</p>\n                    <p className=\"today__listing-item\"><strong>Wind speed:</strong> {today.wind.speed}</p>\n                    <p className=\"today__listing-item\"><strong>Last requested:</strong> {this.getDateAsHours(today.dt)}</p>\n                </div>\n            </div>\n        </div>\n      );\n  }\n  /**\n   * @function renderGeolocationButton\n   * Used to render a geolocation button.\n   * \n   * @returns {String} HTML string\n   */\n  renderGeolocationButton() {\n    if(!this.state.navigator) return;\n    return <button className=\"plain\" onClick={this.handleGetLocation}>Locate me</button>;\n  }\n  /**\n   * @function getGeo\n   * Used to trigger geolocation query\n   */\n  getGeo() {\n    this.state.navigator.geolocation.getCurrentPosition(this.queryWeatherByLocation);\n  }\n  /**\n   * @function handleGeoLocation\n   * Used to query the geolocation of a user\n   * and make a query from the API.\n   */\n  handleGetLocation = () => {\n    this.setState({ \n        loading: true,\n        location: ''\n    }, this.getGeo);\n    \n  }\n  /**\n   * @function queryWeatherByLocation\n   * Used to send coordinates to the API request\n   * when geolocating\n   */\n  queryWeatherByLocation = position =>\n    this.fetchForecastData({ lat: position.coords.latitude, lon: position.coords.longitude });\n  /**\n   * @function handleChange\n   * When a new value is entered into the search field,\n   * update the state value\n   */\n  handleChange = e => {\n    this.setState({ location: e.target.value });\n  }\n  /**\n   * @function handleSubmit\n   * When the search form is submitted, request the weather\n   */\n  handleSubmit = e => {\n    e.preventDefault();\n    this.fetchForecastData();\n  }\n  /**\n   * @function async fetchForecastData\n   * Used to async fetch the desired city weather from API\n   * \n   * @param {Object} payload - A set of query params \n   */\n  async fetchForecastData(payload = { q: this.state.location }) {\n    try {\n      if(this.state.location === '' && !payload.lat && !payload.lon) return;\n      // Loading...\n      this.setState({ \n          loading: true,\n          error: ''\n      });\n      // Await fetch from API\n      const { data: weather } = await api.fetchForecastData({ ...payload, units: this.state.units });\n      const { data: today } = await api.fetchWeatherData({ ...payload, units: this.state.units })\n      // Success, update state\n      this.setState({ \n          loading: false, \n          weather, \n          today,\n          location: `${weather.city.name},${weather.city.country}` \n      });\n      // Save to local storage\n      localStorage.setItem('weatherAppCityName', this.state.location);\n      localStorage.setItem('weatherAppMetric', this.state.units);\n    } catch(error) {\n      const status = error.response.status;\n      let errorMessage = '';\n      if(status === 404) {\n        errorMessage = 'Your location cannot be found. Please be sure to include City and Country Code. ie. Vancouver,CA';\n      } else {\n        errorMessage = 'Oops. There is a technical issue fetching weather. Please try again later.'\n      }\n      this.setState({\n        loading: false,\n        error: errorMessage,\n      });\n    }\n  }\n  /**\n   * @function getIcon\n   * Used to return a full URL to a weather icon image\n   * \n   * @param {String} icon - Icon name\n   * @returns {String} Full URL to image on openweather server\n   */\n  getIconPath(str) {\n      return `https://openweathermap.org/img/w/${str}.png`;\n  }\n  /**\n   * @function getIcon\n   * Used to return a fully qualified image object\n   * for the weather icon.\n   * @param {Object} weather - Weather object\n   */\n  getIcon(weather) {\n    return weather.map(({ icon }, key) =>\n        <div key={key} className=\"icon\"><img src={this.getIconPath(icon)} alt={icon} /></div>\n    );\n  }\n  /**\n   * @function getTemp\n   * Use to return a formatted string with temp and symbol\n   * \n   * @param {Int} temp - Temperature \n   * @returns {String} String with temp type\n   */\n  getTemp(temp) {\n    const tempRound = Math.round(temp);\n    const symbol = (this.state.units === 'metric') ? 'C' : 'F';\n    return <div className=\"temp\">{tempRound}<span>˚{symbol}</span></div>;\n  }\n  /**\n   * @function getDescription\n   * Used to return a weather description.\n   * \n   * @param {Array} weather - Array of weather options\n   * @returns {String} HTML details\n   */\n  getDescription(weather) {\n    return weather.map(({ description }, key) =>\n        <div className=\"weather__description\" key={key}>{description}</div>\n    );\n  }\n  /**\n   * @function getDateAsString\n   * Utility for transforming a timstamp \n   * into a readable date string.\n   * \n   * @param {String} timestamp - Date timestamp\n   * @returns {String} - Human readable day\n   */\n  getDateAsString(timestamp) {\n      return new Date(timestamp*1000).toDateString();\n  }\n  /**\n   * @function addZero\n   * Used to add a zero to single digit minutes\n   * \n   * @param {Int} i - Minutes \n   * @returns {String} - String of number with 0\n   */\n  addZero(i) {\n    if (i < 10) {\n      i = \"0\" + i;\n    }\n    return i;\n  }\n  /**\n   * @function getDateAsHours\n   * Returns a clock time for display in the UI\n   * \n   * @param {String} timestamp\n   * @returns {String} - Clock time \n   */\n  getDateAsHours(timestamp) {\n      const date = new Date(timestamp*1000);\n      let hours = date.getHours();\n      let minutes = this.addZero(date.getMinutes());\n      const ampm = hours >= 12 ? 'pm' : 'am';\n      hours = hours % 12;\n      hours = hours ? hours : 12;\n      minutes = minutes !== '00' ? minutes : '';\n      return <span className=\"time\">{hours}:{minutes}{ampm}</span>;\n  }\n\n  /**\n   * @function getWeatherByDay\n   * Used to filter weather by a specific day.\n   * \n   * @param {String} timestamp - Date timestamp\n   * @returns {Array} - Selection of weather by day\n   */\n  getWeatherByDay(timestamp) {\n    const dateAsString = this.getDateAsString(timestamp);\n    const { list = [] } = this.state.weather;\n    return list.filter(({ dt }) => \n        dateAsString === this.getDateAsString(dt)\n    );    \n  }\n  /**\n   * @function getDaysFromWeather\n   * Filter the weather listing by day. Used to\n   * subgroup results headlined by day.\n   * \n   * @returns {Array} Selection of days\n   */\n  getDaysFromWeather() {\n    const { list = [] } = this.state.weather;\n    let dateTrack = '';\n    return list.filter(({ dt }) => {\n        if(this.getDateAsString(dt) !== dateTrack) {\n            dateTrack = this.getDateAsString(dt);\n            return true;\n        }\n        return false;\n    });\n  }\n  /**\n   * @function getList\n   * Used to parse a full list of weather options\n   * \n   * @returns {String} HTML with details\n   */\n  getWeatherListing() {\n    if(this.state.loading || this.state.error !== '') return [];\n    return this.getDaysFromWeather().map(({dt}, key) => {\n        return (\n            <div className=\"weather__day\" key={key}>\n                <div className=\"headline\">{this.getDateAsString(dt)}</div>\n                <div className=\"weather__hours\">  {\n                        this.getWeatherByDay(dt).map(({ dt, weather, main }, key) => {\n                            return (<div className=\"weather__card\" key={key}>\n                                <div className=\"weather__time\">{this.getDateAsHours(dt)}</div>\n                                {this.getIcon(weather)}\n                                {this.getDescription(weather)}\n                                {this.getTemp(main.temp)}\n                            </div>)\n                        \n                        })\n                    }\n                </div>\n            </div>\n        );\n    });\n  }\n  /**\n   * @function isLoading\n   * Used to output a loading signal when the API\n   * content is being fetched\n   * \n   * @return {String} - Loading string\n   */\n  isLoading() {\n      if(this.state.loading) {\n        return <div className=\"loading\">Loading...</div>\n      }\n      return '';\n  }\n    /**\n   * @function isError\n   * Used to output an error message if there are API\n   * issues returned.\n   * \n   * @return {String} - Error string\n   */\n  isError() {\n    if(this.state.error !== '') {\n      return <div className=\"error\">{this.state.error}</div>\n    }\n    return '';\n  }\n  // Main render function\n  render() {\n    return (\n      <Layout>\n          {this.renderMetricsButtons()}\n          <form className=\"searchForm\" onSubmit={this.handleSubmit} autoComplete=\"off\">\n            <p><label htmlFor=\"search\">Search a city to fetch the 5 day forecast.</label></p>\n            <div className=\"searchForm__inner\">\n              <input id=\"search\" className=\"searchForm__input\" type=\"text\" placeholder=\"ie Vancouver,CA\" value={this.state.location} onChange={this.handleChange} />\n              <button className=\"searchForm__button\" type=\"submit\">Search</button>\n            </div>\n          </form>\n          {this.renderGeolocationButton()}\n          {this.renderTodaysWeather()}\n          <div className=\"weather\">\n            {this.isError()}\n            {this.isLoading()}\n            {this.getWeatherListing()}\n          </div>\n      </Layout>\n    );\n  }\n}\nexport default Homepage;\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}